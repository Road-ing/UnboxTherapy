import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, a as space, t as text, c as claim_element, b as children, f as detach_dev, g as claim_space, h as claim_text, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop } from './client.c7aeb098.js';

/* src\routes\index.svelte generated by Svelte v3.23.2 */

const file = "src\\routes\\index.svelte";

function create_fragment(ctx) {
	let main;
	let div1;
	let section;
	let h2;
	let span0;
	let t0;
	let a0;
	let t1;
	let t2;
	let h30;
	let span1;
	let t3;
	let a1;
	let t4;
	let t5;
	let blockquote;
	let p0;
	let t6;
	let t7;
	let p1;
	let t8;
	let t9;
	let h31;
	let span2;
	let t10;
	let a2;
	let t11;
	let t12;
	let p2;
	let t13;
	let t14;
	let ul0;
	let li0;
	let t15;
	let t16;
	let li1;
	let t17;
	let code0;
	let t18;
	let t19;
	let t20;
	let p3;
	let t21;
	let t22;
	let p4;
	let t23;
	let t24;
	let h32;
	let span3;
	let t25;
	let a3;
	let t26;
	let t27;
	let p5;
	let t28;
	let em0;
	let t29;
	let t30;
	let p6;
	let t31;
	let b0;
	let t32;
	let t33;
	let b1;
	let t34;
	let t35;
	let b2;
	let t36;
	let t37;
	let t38;
	let h33;
	let span4;
	let t39;
	let a4;
	let t40;
	let t41;
	let p7;
	let t42;
	let t43;
	let ul1;
	let li2;
	let t44;
	let t45;
	let li3;
	let t46;
	let t47;
	let li4;
	let t48;
	let em1;
	let t49;
	let t50;
	let code1;
	let t51;
	let t52;
	let em2;
	let t53;
	let t54;
	let t55;
	let li5;
	let t56;
	let code2;
	let t57;
	let t58;
	let code3;
	let t59;
	let t60;
	let t61;
	let h34;
	let span5;
	let t62;
	let a5;
	let t63;
	let t64;
	let p8;
	let t65;
	let t66;
	let div0;
	let pre;
	let code4;
	let t67;
	let t68;
	let aside;
	let div2;
	let ul2;
	let li6;
	let a6;
	let t69;
	let t70;
	let a7;
	let t71;
	let t72;
	let a8;
	let t73;
	let t74;
	let a9;
	let t75;
	let t76;
	let a10;
	let t77;
	let t78;
	let a11;
	let t79;
	let t80;
	let li7;
	let a12;
	let t81;
	let t82;
	let a13;
	let t83;
	let t84;
	let a14;
	let t85;
	let t86;
	let a15;
	let t87;
	let t88;
	let a16;
	let t89;
	let t90;
	let a17;
	let t91;

	const block = {
		c: function create() {
			main = element("main");
			div1 = element("div");
			section = element("section");
			h2 = element("h2");
			span0 = element("span");
			t0 = space();
			a0 = element("a");
			t1 = text("\n        神经网络概论");
			t2 = space();
			h30 = element("h3");
			span1 = element("span");
			t3 = space();
			a1 = element("a");
			t4 = text("\n        构建神经网络");
			t5 = space();
			blockquote = element("blockquote");
			p0 = element("p");
			t6 = text("\"Sapper 尚处于早期开发阶段，在发布 1.0\n          版本之前，某些地方可能会存在改动。本文档在逐步完善过程中，如果你遇到了问题，请大方地在求助。");
			t7 = space();
			p1 = element("p");
			t8 = text("请阅读 以帮助你升级到新版本。");
			t9 = space();
			h31 = element("h3");
			span2 = element("span");
			t10 = space();
			a2 = element("a");
			t11 = text("\n        \" 训练神经网络\"");
			t12 = space();
			p2 = element("p");
			t13 = text("Sapper 是一款用于构建超高性能的 Web 应用的框架。其中有两个基本概念：");
			t14 = space();
			ul0 = element("ul");
			li0 = element("li");
			t15 = text("应用程序的每个页面都由组件组成");
			t16 = space();
			li1 = element("li");
			t17 = text("你可以通过在项目的\n          ");
			code0 = element("code");
			t18 = text("src/routes");
			t19 = text("\n          目录下添加文件来创建页面。文件的内容都会通过服务器来预渲染，以便确保用户首次访问的速度尽可能快，之后便由客户端应用程序接管。");
			t20 = space();
			p3 = element("p");
			t21 = text("遵循最新的最佳实践构建一个应用程序（包括代码拆分、离线支持、服务端渲染混合客户端渲染等）是非常复杂的。但是借助\n        Sapper 可以轻松实现以上这些功能，你只需挥洒自己的创意就行了。");
			t22 = space();
			p4 = element("p");
			t23 = text("虽然阅读此手册你并不需要懂得如何使用\n        Svelte，但如果懂的话会更有帮助。简单说，Svelte 是一款 UI\n        框架，它能将你的组件高度优化为原生 JavaScript 代码。请参考\n        和此以了解更多信息。");
			t24 = space();
			h32 = element("h3");
			span3 = element("span");
			t25 = space();
			a3 = element("a");
			t26 = text("\n        \"最小化损失?\"");
			t27 = space();
			p5 = element("p");
			t28 = text("在战争中，建造桥梁、修路、扫雷并拆除（在战斗条件下均如此）的士兵被称作\n        ");
			em0 = element("em");
			t29 = text("sappers（工兵）");
			t30 = space();
			p6 = element("p");
			t31 = text("对于 Web\n        开发者来说，危险性通常低于战斗工兵。但是我们也会面临一些风险环境：性能不足的设备、糟糕的网络以及前端工程固有的复杂度。Sapper（即\n        ");
			b0 = element("b");
			t32 = text("S");
			t33 = text("\n        velte\n        ");
			b1 = element("b");
			t34 = text("app");
			t35 = text("\n        mak\n        ");
			b2 = element("b");
			t36 = text("er");
			t37 = text("\n        的缩写）使你无畏和忠实的战友！");
			t38 = space();
			h33 = element("h3");
			span4 = element("span");
			t39 = space();
			a4 = element("a");
			t40 = text("\n        \"与 Next.js 对比\"");
			t41 = space();
			p7 = element("p");
			t42 = text("是由推出的 React 框架，也是 Sapper\n        的灵感来源。但两者之间有着明显的区别：");
			t43 = space();
			ul1 = element("ul");
			li2 = element("li");
			t44 = text("Sapper 是基于 Svelte 构建的而非 React， 因此速度更快且你的应用体积更小");
			t45 = space();
			li3 = element("li");
			t46 = text("不同于常规的路由传参方式，我们将路由参数融入文件名中 (参见\n          章节)");
			t47 = space();
			li4 = element("li");
			t48 = text("除了创建\n          ");
			em1 = element("em");
			t49 = text("pages（页面文件）");
			t50 = text("\n          的方式外, 还可以在\n          ");
			code1 = element("code");
			t51 = text("src/routes");
			t52 = text("\n          目录下创建\n          ");
			em2 = element("em");
			t53 = text("server routes（服务端路由）");
			t54 = text("\n          。 这样，你添加 JSON API （如，驱动页面的 JSON\n          API）到程序中将会变得非常容易。 (参阅\n          章节)");
			t55 = space();
			li5 = element("li");
			t56 = text("链接就是简单的\n          ");
			code2 = element("code");
			t57 = text("<a>");
			t58 = text("\n          标签，这点区别于框架定制的\n          ");
			code3 = element("code");
			t59 = text("<Link>");
			t60 = text("\n          组件。这就意味着即便是位于 markdown\n          内容中的链接也能如常访问（你所看到的这篇教程均是由 markdown\n          编写并动态渲染的）。");
			t61 = space();
			h34 = element("h3");
			span5 = element("span");
			t62 = space();
			a5 = element("a");
			t63 = text("\n        \"入门\"");
			t64 = space();
			p8 = element("p");
			t65 = text("构建一个 Sapper 应用程序的最快速方式是使用克隆");
			t66 = space();
			div0 = element("div");
			pre = element("pre");
			code4 = element("code");
			t67 = text("npx   /?????\n          >>5555533262626");
			t68 = space();
			aside = element("aside");
			div2 = element("div");
			ul2 = element("ul");
			li6 = element("li");
			a6 = element("a");
			t69 = text("神经网络概论");
			t70 = space();
			a7 = element("a");
			t71 = text("构建神经网络");
			t72 = space();
			a8 = element("a");
			t73 = text("训练神经网络");
			t74 = space();
			a9 = element("a");
			t75 = text("最小化损失？");
			t76 = space();
			a10 = element("a");
			t77 = text("计算损失函数");
			t78 = space();
			a11 = element("a");
			t79 = text("入门");
			t80 = space();
			li7 = element("li");
			a12 = element("a");
			t81 = text("神经网络概论");
			t82 = space();
			a13 = element("a");
			t83 = text("构建神经网络");
			t84 = space();
			a14 = element("a");
			t85 = text("训练神经网络");
			t86 = space();
			a15 = element("a");
			t87 = text("最小化损失？");
			t88 = space();
			a16 = element("a");
			t89 = text("计算损失函数");
			t90 = space();
			a17 = element("a");
			t91 = text("入门");
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			div1 = claim_element(main_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			section = claim_element(div1_nodes, "SECTION", { class: true, "data-id": true });
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			span0 = claim_element(h2_nodes, "SPAN", { class: true, id: true });
			children(span0).forEach(detach_dev);
			t0 = claim_space(h2_nodes);

			a0 = claim_element(h2_nodes, "A", {
				class: true,
				href: true,
				"aria-hidden": true
			});

			var a0_nodes = children(a0);
			a0_nodes.forEach(detach_dev);
			t1 = claim_text(h2_nodes, "\n        神经网络概论");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			h30 = claim_element(section_nodes, "H3", {});
			var h30_nodes = children(h30);
			span1 = claim_element(h30_nodes, "SPAN", { class: true, id: true });
			children(span1).forEach(detach_dev);
			t3 = claim_space(h30_nodes);

			a1 = claim_element(h30_nodes, "A", {
				class: true,
				href: true,
				"aria-hidden": true
			});

			var a1_nodes = children(a1);
			a1_nodes.forEach(detach_dev);
			t4 = claim_text(h30_nodes, "\n        构建神经网络");
			h30_nodes.forEach(detach_dev);
			t5 = claim_space(section_nodes);
			blockquote = claim_element(section_nodes, "BLOCKQUOTE", {});
			var blockquote_nodes = children(blockquote);
			p0 = claim_element(blockquote_nodes, "P", {});
			var p0_nodes = children(p0);
			t6 = claim_text(p0_nodes, "\"Sapper 尚处于早期开发阶段，在发布 1.0\n          版本之前，某些地方可能会存在改动。本文档在逐步完善过程中，如果你遇到了问题，请大方地在求助。");
			p0_nodes.forEach(detach_dev);
			t7 = claim_space(blockquote_nodes);
			p1 = claim_element(blockquote_nodes, "P", {});
			var p1_nodes = children(p1);
			t8 = claim_text(p1_nodes, "请阅读 以帮助你升级到新版本。");
			p1_nodes.forEach(detach_dev);
			blockquote_nodes.forEach(detach_dev);
			t9 = claim_space(section_nodes);
			h31 = claim_element(section_nodes, "H3", {});
			var h31_nodes = children(h31);
			span2 = claim_element(h31_nodes, "SPAN", { class: true, id: true });
			children(span2).forEach(detach_dev);
			t10 = claim_space(h31_nodes);

			a2 = claim_element(h31_nodes, "A", {
				class: true,
				href: true,
				"aria-hidden": true
			});

			var a2_nodes = children(a2);
			a2_nodes.forEach(detach_dev);
			t11 = claim_text(h31_nodes, "\n        \" 训练神经网络\"");
			h31_nodes.forEach(detach_dev);
			t12 = claim_space(section_nodes);
			p2 = claim_element(section_nodes, "P", {});
			var p2_nodes = children(p2);
			t13 = claim_text(p2_nodes, "Sapper 是一款用于构建超高性能的 Web 应用的框架。其中有两个基本概念：");
			p2_nodes.forEach(detach_dev);
			t14 = claim_space(section_nodes);
			ul0 = claim_element(section_nodes, "UL", {});
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", {});
			var li0_nodes = children(li0);
			t15 = claim_text(li0_nodes, "应用程序的每个页面都由组件组成");
			li0_nodes.forEach(detach_dev);
			t16 = claim_space(ul0_nodes);
			li1 = claim_element(ul0_nodes, "LI", {});
			var li1_nodes = children(li1);
			t17 = claim_text(li1_nodes, "你可以通过在项目的\n          ");
			code0 = claim_element(li1_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t18 = claim_text(code0_nodes, "src/routes");
			code0_nodes.forEach(detach_dev);
			t19 = claim_text(li1_nodes, "\n          目录下添加文件来创建页面。文件的内容都会通过服务器来预渲染，以便确保用户首次访问的速度尽可能快，之后便由客户端应用程序接管。");
			li1_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			t20 = claim_space(section_nodes);
			p3 = claim_element(section_nodes, "P", {});
			var p3_nodes = children(p3);
			t21 = claim_text(p3_nodes, "遵循最新的最佳实践构建一个应用程序（包括代码拆分、离线支持、服务端渲染混合客户端渲染等）是非常复杂的。但是借助\n        Sapper 可以轻松实现以上这些功能，你只需挥洒自己的创意就行了。");
			p3_nodes.forEach(detach_dev);
			t22 = claim_space(section_nodes);
			p4 = claim_element(section_nodes, "P", {});
			var p4_nodes = children(p4);
			t23 = claim_text(p4_nodes, "虽然阅读此手册你并不需要懂得如何使用\n        Svelte，但如果懂的话会更有帮助。简单说，Svelte 是一款 UI\n        框架，它能将你的组件高度优化为原生 JavaScript 代码。请参考\n        和此以了解更多信息。");
			p4_nodes.forEach(detach_dev);
			t24 = claim_space(section_nodes);
			h32 = claim_element(section_nodes, "H3", {});
			var h32_nodes = children(h32);
			span3 = claim_element(h32_nodes, "SPAN", { class: true, id: true });
			children(span3).forEach(detach_dev);
			t25 = claim_space(h32_nodes);

			a3 = claim_element(h32_nodes, "A", {
				class: true,
				href: true,
				"aria-hidden": true
			});

			var a3_nodes = children(a3);
			a3_nodes.forEach(detach_dev);
			t26 = claim_text(h32_nodes, "\n        \"最小化损失?\"");
			h32_nodes.forEach(detach_dev);
			t27 = claim_space(section_nodes);
			p5 = claim_element(section_nodes, "P", {});
			var p5_nodes = children(p5);
			t28 = claim_text(p5_nodes, "在战争中，建造桥梁、修路、扫雷并拆除（在战斗条件下均如此）的士兵被称作\n        ");
			em0 = claim_element(p5_nodes, "EM", {});
			var em0_nodes = children(em0);
			t29 = claim_text(em0_nodes, "sappers（工兵）");
			em0_nodes.forEach(detach_dev);
			p5_nodes.forEach(detach_dev);
			t30 = claim_space(section_nodes);
			p6 = claim_element(section_nodes, "P", {});
			var p6_nodes = children(p6);
			t31 = claim_text(p6_nodes, "对于 Web\n        开发者来说，危险性通常低于战斗工兵。但是我们也会面临一些风险环境：性能不足的设备、糟糕的网络以及前端工程固有的复杂度。Sapper（即\n        ");
			b0 = claim_element(p6_nodes, "B", {});
			var b0_nodes = children(b0);
			t32 = claim_text(b0_nodes, "S");
			b0_nodes.forEach(detach_dev);
			t33 = claim_text(p6_nodes, "\n        velte\n        ");
			b1 = claim_element(p6_nodes, "B", {});
			var b1_nodes = children(b1);
			t34 = claim_text(b1_nodes, "app");
			b1_nodes.forEach(detach_dev);
			t35 = claim_text(p6_nodes, "\n        mak\n        ");
			b2 = claim_element(p6_nodes, "B", {});
			var b2_nodes = children(b2);
			t36 = claim_text(b2_nodes, "er");
			b2_nodes.forEach(detach_dev);
			t37 = claim_text(p6_nodes, "\n        的缩写）使你无畏和忠实的战友！");
			p6_nodes.forEach(detach_dev);
			t38 = claim_space(section_nodes);
			h33 = claim_element(section_nodes, "H3", {});
			var h33_nodes = children(h33);
			span4 = claim_element(h33_nodes, "SPAN", { class: true, id: true });
			children(span4).forEach(detach_dev);
			t39 = claim_space(h33_nodes);

			a4 = claim_element(h33_nodes, "A", {
				class: true,
				href: true,
				"aria-hidden": true
			});

			var a4_nodes = children(a4);
			a4_nodes.forEach(detach_dev);
			t40 = claim_text(h33_nodes, "\n        \"与 Next.js 对比\"");
			h33_nodes.forEach(detach_dev);
			t41 = claim_space(section_nodes);
			p7 = claim_element(section_nodes, "P", {});
			var p7_nodes = children(p7);
			t42 = claim_text(p7_nodes, "是由推出的 React 框架，也是 Sapper\n        的灵感来源。但两者之间有着明显的区别：");
			p7_nodes.forEach(detach_dev);
			t43 = claim_space(section_nodes);
			ul1 = claim_element(section_nodes, "UL", {});
			var ul1_nodes = children(ul1);
			li2 = claim_element(ul1_nodes, "LI", {});
			var li2_nodes = children(li2);
			t44 = claim_text(li2_nodes, "Sapper 是基于 Svelte 构建的而非 React， 因此速度更快且你的应用体积更小");
			li2_nodes.forEach(detach_dev);
			t45 = claim_space(ul1_nodes);
			li3 = claim_element(ul1_nodes, "LI", {});
			var li3_nodes = children(li3);
			t46 = claim_text(li3_nodes, "不同于常规的路由传参方式，我们将路由参数融入文件名中 (参见\n          章节)");
			li3_nodes.forEach(detach_dev);
			t47 = claim_space(ul1_nodes);
			li4 = claim_element(ul1_nodes, "LI", {});
			var li4_nodes = children(li4);
			t48 = claim_text(li4_nodes, "除了创建\n          ");
			em1 = claim_element(li4_nodes, "EM", {});
			var em1_nodes = children(em1);
			t49 = claim_text(em1_nodes, "pages（页面文件）");
			em1_nodes.forEach(detach_dev);
			t50 = claim_text(li4_nodes, "\n          的方式外, 还可以在\n          ");
			code1 = claim_element(li4_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t51 = claim_text(code1_nodes, "src/routes");
			code1_nodes.forEach(detach_dev);
			t52 = claim_text(li4_nodes, "\n          目录下创建\n          ");
			em2 = claim_element(li4_nodes, "EM", {});
			var em2_nodes = children(em2);
			t53 = claim_text(em2_nodes, "server routes（服务端路由）");
			em2_nodes.forEach(detach_dev);
			t54 = claim_text(li4_nodes, "\n          。 这样，你添加 JSON API （如，驱动页面的 JSON\n          API）到程序中将会变得非常容易。 (参阅\n          章节)");
			li4_nodes.forEach(detach_dev);
			t55 = claim_space(ul1_nodes);
			li5 = claim_element(ul1_nodes, "LI", {});
			var li5_nodes = children(li5);
			t56 = claim_text(li5_nodes, "链接就是简单的\n          ");
			code2 = claim_element(li5_nodes, "CODE", {});
			var code2_nodes = children(code2);
			t57 = claim_text(code2_nodes, "<a>");
			code2_nodes.forEach(detach_dev);
			t58 = claim_text(li5_nodes, "\n          标签，这点区别于框架定制的\n          ");
			code3 = claim_element(li5_nodes, "CODE", {});
			var code3_nodes = children(code3);
			t59 = claim_text(code3_nodes, "<Link>");
			code3_nodes.forEach(detach_dev);
			t60 = claim_text(li5_nodes, "\n          组件。这就意味着即便是位于 markdown\n          内容中的链接也能如常访问（你所看到的这篇教程均是由 markdown\n          编写并动态渲染的）。");
			li5_nodes.forEach(detach_dev);
			ul1_nodes.forEach(detach_dev);
			t61 = claim_space(section_nodes);
			h34 = claim_element(section_nodes, "H3", {});
			var h34_nodes = children(h34);
			span5 = claim_element(h34_nodes, "SPAN", { class: true, id: true });
			children(span5).forEach(detach_dev);
			t62 = claim_space(h34_nodes);

			a5 = claim_element(h34_nodes, "A", {
				class: true,
				href: true,
				"aria-hidden": true
			});

			var a5_nodes = children(a5);
			a5_nodes.forEach(detach_dev);
			t63 = claim_text(h34_nodes, "\n        \"入门\"");
			h34_nodes.forEach(detach_dev);
			t64 = claim_space(section_nodes);
			p8 = claim_element(section_nodes, "P", {});
			var p8_nodes = children(p8);
			t65 = claim_text(p8_nodes, "构建一个 Sapper 应用程序的最快速方式是使用克隆");
			p8_nodes.forEach(detach_dev);
			t66 = claim_space(section_nodes);
			div0 = claim_element(section_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			pre = claim_element(div0_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			code4 = claim_element(pre_nodes, "CODE", {});
			var code4_nodes = children(code4);
			t67 = claim_text(code4_nodes, "npx   /?????\n          >>5555533262626");
			code4_nodes.forEach(detach_dev);
			pre_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t68 = claim_space(main_nodes);
			aside = claim_element(main_nodes, "ASIDE", { class: true });
			var aside_nodes = children(aside);
			div2 = claim_element(aside_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			ul2 = claim_element(div2_nodes, "UL", { class: true });
			var ul2_nodes = children(ul2);
			li6 = claim_element(ul2_nodes, "LI", { class: true });
			var li6_nodes = children(li6);
			a6 = claim_element(li6_nodes, "A", { href: true, class: true });
			var a6_nodes = children(a6);
			t69 = claim_text(a6_nodes, "神经网络概论");
			a6_nodes.forEach(detach_dev);
			t70 = claim_space(li6_nodes);

			a7 = claim_element(li6_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a7_nodes = children(a7);
			t71 = claim_text(a7_nodes, "构建神经网络");
			a7_nodes.forEach(detach_dev);
			t72 = claim_space(li6_nodes);

			a8 = claim_element(li6_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a8_nodes = children(a8);
			t73 = claim_text(a8_nodes, "训练神经网络");
			a8_nodes.forEach(detach_dev);
			t74 = claim_space(li6_nodes);

			a9 = claim_element(li6_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a9_nodes = children(a9);
			t75 = claim_text(a9_nodes, "最小化损失？");
			a9_nodes.forEach(detach_dev);
			t76 = claim_space(li6_nodes);

			a10 = claim_element(li6_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a10_nodes = children(a10);
			t77 = claim_text(a10_nodes, "计算损失函数");
			a10_nodes.forEach(detach_dev);
			t78 = claim_space(li6_nodes);

			a11 = claim_element(li6_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a11_nodes = children(a11);
			t79 = claim_text(a11_nodes, "入门");
			a11_nodes.forEach(detach_dev);
			li6_nodes.forEach(detach_dev);
			t80 = claim_space(ul2_nodes);
			li7 = claim_element(ul2_nodes, "LI", { class: true });
			var li7_nodes = children(li7);
			a12 = claim_element(li7_nodes, "A", { href: true, class: true });
			var a12_nodes = children(a12);
			t81 = claim_text(a12_nodes, "神经网络概论");
			a12_nodes.forEach(detach_dev);
			t82 = claim_space(li7_nodes);

			a13 = claim_element(li7_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a13_nodes = children(a13);
			t83 = claim_text(a13_nodes, "构建神经网络");
			a13_nodes.forEach(detach_dev);
			t84 = claim_space(li7_nodes);

			a14 = claim_element(li7_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a14_nodes = children(a14);
			t85 = claim_text(a14_nodes, "训练神经网络");
			a14_nodes.forEach(detach_dev);
			t86 = claim_space(li7_nodes);

			a15 = claim_element(li7_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a15_nodes = children(a15);
			t87 = claim_text(a15_nodes, "最小化损失？");
			a15_nodes.forEach(detach_dev);
			t88 = claim_space(li7_nodes);

			a16 = claim_element(li7_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a16_nodes = children(a16);
			t89 = claim_text(a16_nodes, "计算损失函数");
			a16_nodes.forEach(detach_dev);
			t90 = claim_space(li7_nodes);

			a17 = claim_element(li7_nodes, "A", {
				href: true,
				class: true,
				"data-level": true
			});

			var a17_nodes = children(a17);
			t91 = claim_text(a17_nodes, "入门");
			a17_nodes.forEach(detach_dev);
			li7_nodes.forEach(detach_dev);
			ul2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			aside_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "offset-anchor");
			attr_dev(span0, "id", "神经网络概论");
			add_location(span0, file, 7, 8, 187);
			attr_dev(a0, "class", "anchor");
			attr_dev(a0, "href", "#神经网络概论");
			attr_dev(a0, "aria-hidden", "");
			add_location(a0, file, 8, 8, 243);
			attr_dev(h2, "class", "svelte-a3bmb2");
			add_location(h2, file, 6, 6, 152);
			attr_dev(span1, "class", "offset-anchor");
			attr_dev(span1, "id", "构建神经网络");
			add_location(span1, file, 12, 8, 340);
			attr_dev(a1, "class", "anchor");
			attr_dev(a1, "href", "#构建神经网络");
			attr_dev(a1, "aria-hidden", "");
			add_location(a1, file, 13, 8, 396);
			add_location(h30, file, 11, 6, 327);
			add_location(p0, file, 17, 8, 504);
			add_location(p1, file, 21, 8, 622);
			add_location(blockquote, file, 16, 6, 483);
			attr_dev(span2, "class", "offset-anchor");
			attr_dev(span2, "id", "训练神经网络");
			add_location(span2, file, 24, 8, 684);
			attr_dev(a2, "class", "anchor");
			attr_dev(a2, "href", "#训练神经网络");
			attr_dev(a2, "aria-hidden", "");
			add_location(a2, file, 25, 8, 740);
			add_location(h31, file, 23, 6, 671);
			add_location(p2, file, 28, 6, 830);
			add_location(li0, file, 32, 8, 913);
			add_location(code0, file, 35, 10, 981);
			add_location(li1, file, 33, 8, 946);
			add_location(ul0, file, 31, 6, 900);
			add_location(p3, file, 39, 6, 1110);
			add_location(p4, file, 43, 6, 1238);
			attr_dev(span3, "class", "offset-anchor");
			attr_dev(span3, "id", "最小化损失");
			add_location(span3, file, 50, 8, 1407);
			attr_dev(a3, "class", "anchor");
			attr_dev(a3, "href", "#最小化损失");
			attr_dev(a3, "aria-hidden", "true");
			add_location(a3, file, 51, 8, 1462);
			add_location(h32, file, 49, 6, 1394);
			add_location(em0, file, 56, 8, 1610);
			add_location(p5, file, 54, 6, 1554);
			add_location(b0, file, 61, 8, 1751);
			add_location(b1, file, 63, 8, 1782);
			add_location(b2, file, 65, 8, 1813);
			add_location(p6, file, 58, 6, 1648);
			attr_dev(span4, "class", "offset-anchor");
			attr_dev(span4, "id", "计算损失函数");
			add_location(span4, file, 69, 8, 1877);
			attr_dev(a4, "class", "anchor");
			attr_dev(a4, "href", "#计算损失函数");
			attr_dev(a4, "aria-hidden", "true");
			add_location(a4, file, 70, 8, 1933);
			add_location(h33, file, 68, 6, 1864);
			add_location(p7, file, 73, 6, 2032);
			add_location(li2, file, 78, 8, 2127);
			add_location(li3, file, 81, 8, 2211);
			add_location(em1, file, 87, 10, 2323);
			add_location(code1, file, 89, 10, 2375);
			add_location(em2, file, 91, 10, 2425);
			add_location(li4, file, 85, 8, 2293);
			add_location(code2, file, 98, 10, 2598);
			add_location(code3, file, 100, 10, 2652);
			add_location(li5, file, 96, 8, 2565);
			add_location(ul1, file, 77, 6, 2114);
			attr_dev(span5, "class", "offset-anchor");
			attr_dev(span5, "id", "入门");
			add_location(span5, file, 107, 8, 2819);
			attr_dev(a5, "class", "anchor");
			attr_dev(a5, "href", "#入门");
			attr_dev(a5, "aria-hidden", "");
			add_location(a5, file, 108, 8, 2871);
			add_location(h34, file, 106, 6, 2806);
			add_location(p8, file, 111, 6, 2952);
			add_location(code4, file, 114, 10, 3051);
			attr_dev(pre, "class", "language-bash");
			add_location(pre, file, 113, 8, 3013);
			attr_dev(div0, "class", "");
			add_location(div0, file, 112, 6, 2993);
			attr_dev(section, "class", "svelte-a3bmb2");
			attr_dev(section, "data-id", "神经网络概论");
			add_location(section, file, 5, 4, 97);
			attr_dev(div1, "class", "content listify svelte-a3bmb2");
			add_location(div1, file, 4, 2, 49);
			attr_dev(a6, "href", "#神经网络概论");
			attr_dev(a6, "class", "svelte-mm3tjv section");
			add_location(a6, file, 126, 10, 3352);
			attr_dev(a7, "href", "#构建神经网络");
			attr_dev(a7, "class", "svelte-mm3tjv subsection");
			attr_dev(a7, "data-level", "3");
			add_location(a7, file, 127, 10, 3421);
			attr_dev(a8, "href", "#训练神经网络");
			attr_dev(a8, "class", "svelte-mm3tjv subsection");
			attr_dev(a8, "data-level", "3");
			add_location(a8, file, 133, 10, 3568);
			attr_dev(a9, "href", "#最小化损失");
			attr_dev(a9, "class", "svelte-mm3tjv subsection");
			attr_dev(a9, "data-level", "3");
			add_location(a9, file, 139, 10, 3715);
			attr_dev(a10, "href", "#计算损失函数");
			attr_dev(a10, "class", "svelte-mm3tjv subsection");
			attr_dev(a10, "data-level", "3");
			add_location(a10, file, 145, 10, 3861);
			attr_dev(a11, "href", "#入门");
			attr_dev(a11, "class", "svelte-mm3tjv subsection");
			attr_dev(a11, "data-level", "3");
			add_location(a11, file, 151, 10, 4008);
			attr_dev(li6, "class", "svelte-mm3tjv");
			add_location(li6, file, 125, 8, 3315);
			attr_dev(a12, "href", "#神经网络概论");
			attr_dev(a12, "class", "svelte-mm3tjv section");
			add_location(a12, file, 156, 10, 4160);
			attr_dev(a13, "href", "#构建神经网络");
			attr_dev(a13, "class", "svelte-mm3tjv subsection");
			attr_dev(a13, "data-level", "3");
			add_location(a13, file, 157, 10, 4229);
			attr_dev(a14, "href", "#训练神经网络");
			attr_dev(a14, "class", "svelte-mm3tjv subsection");
			attr_dev(a14, "data-level", "3");
			add_location(a14, file, 163, 10, 4376);
			attr_dev(a15, "href", "#最小化损失");
			attr_dev(a15, "class", "svelte-mm3tjv subsection");
			attr_dev(a15, "data-level", "3");
			add_location(a15, file, 169, 10, 4523);
			attr_dev(a16, "href", "#计算损失函数");
			attr_dev(a16, "class", "svelte-mm3tjv subsection");
			attr_dev(a16, "data-level", "3");
			add_location(a16, file, 175, 10, 4669);
			attr_dev(a17, "href", "#入门");
			attr_dev(a17, "class", "svelte-mm3tjv subsection");
			attr_dev(a17, "data-level", "3");
			add_location(a17, file, 181, 10, 4816);
			attr_dev(li7, "class", "svelte-mm3tjv");
			add_location(li7, file, 155, 8, 4123);
			attr_dev(ul2, "class", "svelte-mm3tjv reference-toc");
			add_location(ul2, file, 124, 6, 3266);
			attr_dev(div2, "class", "svelte-a3bmb2 sidebar");
			add_location(div2, file, 123, 4, 3224);
			attr_dev(aside, "class", "sidebar-container svelte-a3bmb2 ");
			add_location(aside, file, 122, 2, 3171);
			attr_dev(main, "class", "svelte-d6kcga");
			add_location(main, file, 3, 0, 18);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div1);
			append_dev(div1, section);
			append_dev(section, h2);
			append_dev(h2, span0);
			append_dev(h2, t0);
			append_dev(h2, a0);
			append_dev(h2, t1);
			append_dev(section, t2);
			append_dev(section, h30);
			append_dev(h30, span1);
			append_dev(h30, t3);
			append_dev(h30, a1);
			append_dev(h30, t4);
			append_dev(section, t5);
			append_dev(section, blockquote);
			append_dev(blockquote, p0);
			append_dev(p0, t6);
			append_dev(blockquote, t7);
			append_dev(blockquote, p1);
			append_dev(p1, t8);
			append_dev(section, t9);
			append_dev(section, h31);
			append_dev(h31, span2);
			append_dev(h31, t10);
			append_dev(h31, a2);
			append_dev(h31, t11);
			append_dev(section, t12);
			append_dev(section, p2);
			append_dev(p2, t13);
			append_dev(section, t14);
			append_dev(section, ul0);
			append_dev(ul0, li0);
			append_dev(li0, t15);
			append_dev(ul0, t16);
			append_dev(ul0, li1);
			append_dev(li1, t17);
			append_dev(li1, code0);
			append_dev(code0, t18);
			append_dev(li1, t19);
			append_dev(section, t20);
			append_dev(section, p3);
			append_dev(p3, t21);
			append_dev(section, t22);
			append_dev(section, p4);
			append_dev(p4, t23);
			append_dev(section, t24);
			append_dev(section, h32);
			append_dev(h32, span3);
			append_dev(h32, t25);
			append_dev(h32, a3);
			append_dev(h32, t26);
			append_dev(section, t27);
			append_dev(section, p5);
			append_dev(p5, t28);
			append_dev(p5, em0);
			append_dev(em0, t29);
			append_dev(section, t30);
			append_dev(section, p6);
			append_dev(p6, t31);
			append_dev(p6, b0);
			append_dev(b0, t32);
			append_dev(p6, t33);
			append_dev(p6, b1);
			append_dev(b1, t34);
			append_dev(p6, t35);
			append_dev(p6, b2);
			append_dev(b2, t36);
			append_dev(p6, t37);
			append_dev(section, t38);
			append_dev(section, h33);
			append_dev(h33, span4);
			append_dev(h33, t39);
			append_dev(h33, a4);
			append_dev(h33, t40);
			append_dev(section, t41);
			append_dev(section, p7);
			append_dev(p7, t42);
			append_dev(section, t43);
			append_dev(section, ul1);
			append_dev(ul1, li2);
			append_dev(li2, t44);
			append_dev(ul1, t45);
			append_dev(ul1, li3);
			append_dev(li3, t46);
			append_dev(ul1, t47);
			append_dev(ul1, li4);
			append_dev(li4, t48);
			append_dev(li4, em1);
			append_dev(em1, t49);
			append_dev(li4, t50);
			append_dev(li4, code1);
			append_dev(code1, t51);
			append_dev(li4, t52);
			append_dev(li4, em2);
			append_dev(em2, t53);
			append_dev(li4, t54);
			append_dev(ul1, t55);
			append_dev(ul1, li5);
			append_dev(li5, t56);
			append_dev(li5, code2);
			append_dev(code2, t57);
			append_dev(li5, t58);
			append_dev(li5, code3);
			append_dev(code3, t59);
			append_dev(li5, t60);
			append_dev(section, t61);
			append_dev(section, h34);
			append_dev(h34, span5);
			append_dev(h34, t62);
			append_dev(h34, a5);
			append_dev(h34, t63);
			append_dev(section, t64);
			append_dev(section, p8);
			append_dev(p8, t65);
			append_dev(section, t66);
			append_dev(section, div0);
			append_dev(div0, pre);
			append_dev(pre, code4);
			append_dev(code4, t67);
			append_dev(main, t68);
			append_dev(main, aside);
			append_dev(aside, div2);
			append_dev(div2, ul2);
			append_dev(ul2, li6);
			append_dev(li6, a6);
			append_dev(a6, t69);
			append_dev(li6, t70);
			append_dev(li6, a7);
			append_dev(a7, t71);
			append_dev(li6, t72);
			append_dev(li6, a8);
			append_dev(a8, t73);
			append_dev(li6, t74);
			append_dev(li6, a9);
			append_dev(a9, t75);
			append_dev(li6, t76);
			append_dev(li6, a10);
			append_dev(a10, t77);
			append_dev(li6, t78);
			append_dev(li6, a11);
			append_dev(a11, t79);
			append_dev(ul2, t80);
			append_dev(ul2, li7);
			append_dev(li7, a12);
			append_dev(a12, t81);
			append_dev(li7, t82);
			append_dev(li7, a13);
			append_dev(a13, t83);
			append_dev(li7, t84);
			append_dev(li7, a14);
			append_dev(a14, t85);
			append_dev(li7, t86);
			append_dev(li7, a15);
			append_dev(a15, t87);
			append_dev(li7, t88);
			append_dev(li7, a16);
			append_dev(a16, t89);
			append_dev(li7, t90);
			append_dev(li7, a17);
			append_dev(a17, t91);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZDA5NzgwMGUuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
